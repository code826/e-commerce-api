HTTP response status code indicate about the like request has completed succesfully


Informational response (100-199);
 
Successful Response (200-299) -->;
 200 (ok)
 201(post) --> created

Redirection Message (300-399)

Client error responses (400-499)-->
400(Bad request)
401(unauthorized)
403(forbidden)
404(not-found)
server error responses (500-599)

200
201

400
401
404


500
503


project 


product 


add 
POST /product 

read 
GET /product 
GET /product/id 
/product/1 
/product/2
edit 
PUT /product/id 

delete 
DELETE /product/id



product 
 model 
    property 
     id,name,describtion,price,category,sizes,imageUrl,
 
//filter 
 // [p1,p2,p3,p4]
   //prices,categories
   //minprice and max price 
   //categories : [] 

//client : minPrices,maxPrices categories:[]

//route /product/filter --.get request 
//queryParameter:minPrice,maxPrice,categories:[]
//response : all the product matching with the filters

  // minPrice : -1;
  // maxPrice : 10e5
  //categories: [];
  //

// authentication and authorizations  
// user --. customer,admin
 // add a product (admin)
 // rate a product (customer,admin)
 // get product (no authentication required)
 // filter (no authentication)
 //edit (admin)
 //order (customer,admin)

 authentication : 
  to  identify who the user is

request --> user_2 (authentication)
DB :
 user_1,user_2,user_3

 //authorizations :
  // access to resources or pages 


//authentication
  //username , password
  //headers
  //if user exist req.user = user 
  //return error  

//basic authentication 
 // you need to store your password 
 // no encryption --> encoding (base64) --> public alogorithm --> easily decode
 //

 JWT --> JSON web token
//data store --> JSON  --> token 
JWT --> it is a token based authentication which create token instead of using your credentials
It is stateless , scalable , easy to implement
A JWT is composed of three parts, each separated by a dot (.):

Header: Contains metadata about the token, such as the type of token (JWT) and the hashing algorithm used (e.g., HMAC SHA256 or RSA).

Payload: Contains the claims, which are the statements about an entity (typically, the user) and additional data. For example, the payload might include user ID, username, and expiration time of the token.

Signature: Ensures that the token hasn't been altered. It is created by taking the encoded header, encoded payload, and a secret key, and then hashing them together using the algorithm specified in the header.


hashing 
 Hashing_algorithm(
    base64-ecoding(header)
    +base64-encoding(payload)
    +secret
 )

 signature


 //step 1 :
  login with credentials 
    if credentials is right i will generate the token;

  add product 
   i will the sent the token and token will verify  


https://swagger.io/docs/specification/about/


rate a product

{
  product_id:-1,
  user_id:3,
  rating:2
}

// inserting 
  // first i will check the user that user exist or not 
  // second i will check the product that product exist
  // duplicate exist we will overwrite otherwise create new entry
  // enter
[
 {
  userId:2,
  rating:4 
 }
]

{
  name:
  ratings:[{userId:1,rating:4},{userId:3,rating:15}];


}

userId:1 
rating4

3 - 5 minutes
cart 
 /ecommerce website 
 model for cart 
  properties 


routes 
 POST /cart 
 DELETE /cart/:id
 PUT /cart/:id?qty=10
 GET /cart

//authentication : yes (userId) --> the person who has done the login 
//POST /cart 
 // {qty,product_id} -->  
    validation 
      product Id is valid or not 
      userId is valid or not 
      qty is valid or not
      all sum up qty of the product should be less than total_qty



public key : 6254fe0616c07ecad3e7bae9c76b2b8f
private key: c6adce16a7404d169aceb135d71604fee2dff253


for using swagger you need following packages
  swagger-ui-express --> package
  npm i swagger-ui-express --D
  npm i swagger-jsdoc --D

  annotation
  Ctrl+D  -> multiselect
  shift+alt+down--> just create the new 
  shift+alt+down--> just create the new 


https://marketplace.visualstudio.com/items?itemName=ajmnz.swagger-jsdoc-indent
https://swagger.io/docs/specification/about/
//first

   

   //express
   //cors
   //jwt 
   //multer
   //validator
   //uuid 
   //moment
   //.env


   model for comments 
   {
    id:
    created_at:2024-10-10 12:00:00
    updated_at:
    text:
    user_id:
    post_id:
   }
  like = {
    id:1,
    user_id:5,
    post_id:7,
    created_at:moment().format('YYYY-MM-DD HH:mm:ss');

   }



   //no sql 
    // data in json format 
    //database 
      //collection
        //document --> json 
         {
          id:1; //field : 
         }

   // schemaless --> document1 and document2 of same collection may have different 



   {
    id:1,
    name:'vikas'
   },
   {
    id:1,
    name:'dfkjdf',
    class:10

   }   
//


//CRUD Operation

 //UI
   //creat database db_name;
// show databases;
// use db_name;		


{
	"roll_no":2,
	"name":"vikas",
	"email":"v1@gmail.com",
	"pass":"12345",
	"habbits":{
		"indoor":["chess"],
		"outdoor":["cricket","basketball"]
	}
}
abcd-de
db['adb-de']

//CRUD
 //Create 
	//insertOne
		db.users.insertOne({
			"roll_no":2,
			"name":"vikas",
			"email":"t1@gmail.com",
			"pass":"12345",
			"habbits":{
				"indoor":["chess"],
				"outdoor":["cricket","basketball"]
			}
		});
		db.users_new.insertMany([
			{
				"roll_no":4,
				"name":"sumit",
				"email":"t3@gmail.com",
				"pass":"12345",
				"habbits":{
					"indoor":["chess"],
					"outdoor":["cricket","basketball"]
				}
			},
			{
				"roll_no":5,
				"name":"ajith",
				"email":"t4@gmail.com",
				"pass":"12345",
				"habbits":{
					"indoor":["chess"],
					"outdoor":["cricket","basketball"]
				}
			},
		]);
		return {
		  acknowledged: true,
		  insertedIds: {
		    '0': ObjectId('66e068d3a823f0aceec73bfa'),
		    '1': ObjectId('66e068d3a823f0aceec73bfb')
		  }
		}
	//insertMany
	
 //read
		//findOne
		 db.users.findOne({name:"vikas1"})
		//find
		 db.users.find({name:"vikas1"}); // 
//update 
		//
		 //updateOne
		 db.users.updateOne({email:"v2@gmail.com"},{$set:{password:'54321'}});
		//updateMany
		 db.users.updateMany({name:"vikas"},{$set:{pass:12345}});
		//replaceOne
		 db.users.replaceOne({name:'vikas'},{email:'only-field@gmail.com',name:'dfnnbjkdbf'});
//delete
		 //
		 .deleteOne({name:"xgtsiud"});
		 .deleteMany({name:'dhng'})

{
	name:"vikas",
	email:"t1@gmail.com"
}

{
	email:"t2@gmail.com"
}

{
	email:"t2@gmail.com"
}

{
	_id:1
	name:"vikas"
}
{
	_id:2
	name:null

}


// find --> query --> 
 //operator 
// password storage 
// dotenv
// repositroy

//operators 
  // product 
    price > 100 
    price > 10 and < 30

    price =10 or off is 90%


name == "vikas" , "price" >= 10;

.find({$and:[{name:"vikas"},{$price:{$gt:10}}]})


$and:[{$name:"producttwo"},{$price:{$gte : 10 }}]


{
  id:
  name:
  class
  size:["s","m","l"]
},
$in:["m","l"]
{
  id:
  name:
  class:
  rollNo:>=0
}

.find({rollNo:{$exist:true}});


price >10 and price <20

.find({$and:[{price:{$gt:10}},{price:{$lt:20}}]})


size:["s","m"];

add large 

size:["s","m","l"];

.updateOne({_id:'123'},{$set:{size:size}});

 
 what is the issue .

 what is the solutions

 orm and odm 

 mongoose 
install 
connect to mongo db 

schema 
 types 
 validation 

models 
 crud operations

 find({},{$sort:[''price:1]})

 find({})
find({},{$sort})

 find().sort().limit()

query = .find();

if(sort){
  qury.sort()
}
query.exec();


let user = user.find({id:dhffjkdf})
user.fullName = user.firstName + USER.lastName

user.fees = //admin 

if !admin 
 projection({feeStrcuture::0)})
get the data 

let fullName = user.firstName+user.lastName;


await User.
  findOne({ name: 'Val' }).
  populate({
    path: 'friends',
    // Get friends of friends - populate the 'friends' array for every friend
    populate: { path: 'friends' }
  });